
Parameters:
  InstanceType:
    Description: EC2 instance type.
    Type: String
  KeyName:
    Description: Name of an existing EC2 key pair for SSH access to the EC2 instance.
    Type: AWS::EC2::KeyPair::KeyName
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})" # IP Address
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  # NelieParameter:
  #   Type: String
  #   Default: 'NELIE'
  ImageId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  MyVPC:
    Description: VPC to operate in
    Type: AWS::EC2::VPC::Id
  PublicSubnet:
    Type: String

Resources:
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType 
      KeyName: !Ref KeyName
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<html><body><h1>Hello from Server in ${AWS::Region}<h1></body></html>" > /var/www/html/index.html

  WebServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Enable HTTP access via port 80 + SSH access'
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: '80'
          IpProtocol: tcp
          ToPort: '80'
        - CidrIp: !Ref SSHLocation
          FromPort: '22'
          IpProtocol: tcp
          ToPort: '22'
      VpcId: !Ref MyVPC


Outputs:
  PublicIp:
    Description: InstanceId of the newly created EC2 instance
    Value: !GetAtt WebServer.PublicIp # return the ip addr
    
  PublicDnsName:
    Description: gives our public dns name to test
    Value: !GetAtt WebServer.PublicDnsName 
    Export: # Make the output available to re-use
      Name: !Sub "${AWS::StackName}-PublicDnsName"
  
# Outputs:
#   NelieParamOutput:
#     Description: whatever
#     Value: !Sub '${NelieParameter} is living on the west coast'
